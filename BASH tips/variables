Var names:
----------
 NOTE The SheBang is the path to the interpreter:
 AS IN:    #!/path/to/interpreter
 or:      #!/bin/bash

Storage locations that have a name
Name-value pairs
Syntax:
     VARIABLE_NAME="Value"
    * Do not use any spaces before or after the equal sign.
Variables are case sensitive
UPPER CASE by convention - By convention variables are uppercase


Cannot:

- Start with a number
- contain hypens
- contain at "@" signs.

Valid:
------
FIRST3LETTERS="ABC"
FIRST_THREE_LETTERS="ABC"
firstThreeLetters="ABC"

Invalid:
--------
3LETTERS="ABC"
first-three-letters="ABC"
first@Three@Letters="ABC"


Must include curly braces if you are using the variable with other text/data.

 -MY_SHELL="bash"
  echo "I am ${MY_SHELL}ing on my keyboard."

 - - without the burly braces the variable won't print.


 Assignment:
 -----------
 Can assign the results of a command: such as hostname.
 SERVER_NAME=$(hostname)   OR older way has back-ticks: SERVER_NAME=$`hostname`
 > must have parenthesis around the command.\\variables
 VAR="value"    NO SPACES

 echo builtin command generates STDOUT
  - including displaying the contents of variables.

 Single verses double quotes:

 "${VAR} gets expanded"
 '${VAR} gets expanded' - a literal string everything gets displayed exactly as it appears and variable expansion is not applied.


 Shell VARIABLES set automatically.

 i.e.  HOSTNAME
    RANDOMUID
 etc...

 Command substitution
 ----------------------
 VAR=$(command)

 VAR=`command`    OLD STYLE  (Backticks)

 echo "Output of a command: $(command)"
 i.e  echo "Output of the hostname command is: $(hostname)"
