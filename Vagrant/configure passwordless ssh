
    Configuring passwordless SSH logins.

    Using the ssh-keygen and ssh-copy-id commands.
> don't use a password a passphrase or you will have to enter in a passphrase each
time you attempt to login via ssh...
Accept defaults


ssh-keygen

ssh-keygen
Generating public/private rsa key pair.
Enter file in which to save the key (/home/vagrant/.ssh/id_rsa):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /home/vagrant/.ssh/id_rsa.
Your public key has been saved in /home/vagrant/.ssh/id_rsa.pub.
The key fingerprint is:
SHA256:HDdU3TuFhA1Nr4dlqRqZMPhuZyhBxPKVbWURLF+T07Q vagrant@admin01
The key's randomart image is:
+---[RSA 2048]----+
|      ..  +.=&=++|
|     ....+ +o.=**|
|      oooo+ o .EO|
|      .o.oo.o..B |
|       .S. + .o o|
|        o . o  . |
|       . + +     |
|        o o      |
|                 |
+----[SHA256]-----+


Now you have to put the public key on the remote system...
==========================================================

ssh-copy-id

ssh-copy-id server01
/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: "/home/vagrant/.ssh/id_rsa.pub"
The authenticity of host 'server01 (10.9.8.11)' can't be established.
ECDSA key fingerprint is SHA256:Fi4FisVgFyEkos9NgKz0q+zzZwe3+xhCHWGrXL+jZck.
ECDSA key fingerprint is MD5:b6:04:55:d7:db:3c:a8:a1:b6:f6:15:1f:be:7e:48:41.
Are you sure you want to continue connecting (yes/no)? yes
/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed
/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys
vagrant@server01's password:
Permission denied, please try again.
vagrant@server01's password:

Number of key(s) added: 1

Now try logging into the machine, with:   "ssh 'server01'"
and check to make sure that only the key(s) you wanted were added.


[vagrant@admin01 ~]$ ssh server01
[vagrant@server01 ~]$

Don't forget to logout.
 exit
logout
Connection to server01 closed.

    How to execute commands on remote systems.
----------------------------------------------

[vagrant@admin01 ~]$ ssh server01 hostname
server01
[vagrant@admin01 ~]$

[vagrant@admin01 ~]$ for N in 1 2
> do
>  ssh server0${N} hostname
> done
server01
server02

Expression evaluation
----------------------

for server in $(cat servers)

> the $ parenthesis means to evaluate or expand the out put the of the expression
inside the ().

for SERVER in $(cat servers)
 do ssh ${SERVER} hostname
 ssh ${SERVER} uptime
done

SAME AS:
--------

for SERVER in $(cat servers) ; do ssh ${SERVER} hostname; ssh ${SERVER} uptime; done
server01
 12:51:45 up  1:03,  0 users,  load average: 0.00, 0.01, 0.05
server02
 12:51:45 up  1:01,  0 users,  load average: 0.00, 0.01, 0.05


    Displaying the process table and running processes.
----------------------------------------------------------

ps

ps -ef shows every process running


    Understanding the exit status returned by ssh.
    The difference between “ssh sudo” and “sudo ssh”.

ssh server01 'ps -ef | head -3 '
UID        PID  PPID  C STIME TTY          TIME CMD
root         1     0  0 11:48 ?        00:00:01 /usr/lib/systemd/systemd --switched-root --system --deserialize 21
root         2     0  0 11:48 ?        00:00:00 [kthreadd]

SSH will ext with the exit status of the remote command that was executed
or 255 if an error occurred.

To verify that the ssh commands were run correctly:
----------------------------------------------------
> If you were using a pipe on the remote system.

ssh server 01 'set -o pipefail; false | true'[vagrant@admin01 vagrant]$ ssh server01 'set -o pipefail; false | true'
[vagrant@admin01 vagrant]$ echo $?
1

Here we get an exit status of 1 because and error occurred during the pipeline.
