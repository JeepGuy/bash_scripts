Cut and Awk
===========

Using the cut command to remove sections of a file by byte, character, or field.

Cut by character
----------------

cat /etc/passwd

root:x:0:0:root:/root:/bin/bash
bin:x:1:1:bin:/bin:/sbin/nologin
daemon:x:2:2:daemon:/sbin:/sbin/nologin
etc...

-c   cut by character    range that we are specifying is after the -c  1 in this case

cut -c 1 /etc/passwd
r
b
d
etc...

cut by the seventh character... - will only show the seventh character.

cut -c 7  /etc/passwd
:
1
:
etc...

Supplying different types of ranges to the cut command.
-------------------------------------------------------

Specify a starting and an ending position with a hyphen.
------------------- Don't use spaces in the range.

cut -c 4-7  /etc/passwd
t:x:
:x:1
mon:

Specify all characters after character x ( 4 in this case) use a dash with nothing after it.

cut -c 4-  /etc/passwd
t:x:0:0:root:/root:/bin/bash
:x:1:1:bin:/bin:/sbin/nologin
mon:x:2:2:daemon:/sbin:/sbin/nologin
etc...

Display the opposite - Display every character up to and including a position.
 --- cut -c -<characternumber>
cut -c -4 /etc/passwd
root
bin:
daem
 THIS RANGE IS EXACTLY THE SAME AS -c 1-4

Pick out multiple individual characters by separating them with a comma
---------    Will not change the order if if listed out of  order.
cut -c 1,3,5 /etc/passwd
ro:
bnx
deo

cut -c 1,5,3 /etc/passwd
ro:
bnx
deo

If you select a character that doesn't exist in any lines you'll get a blank line for each line
in the file.

cut -c 999 /etc/passwd



(No output characters)


The difference between a character and a byte.
-----------------------------------------------
use the -b option to cut my byte.

cut -b 1 /etc/passwd
r
b
d

The same as -c 1 in this particular case.

UTF-8 characters are multi-byte characters


How to use backslash escapes with the echo command.
----------------------------------------------------
Cut by a field -f option...
DEFAULT cut command operates n tab fields...
\t is tab character...
echo -e "one\ttwo\tthree\tfour"
one	two	three	four

$ echo -e "one\ttwo\tthree\tfour" | cut -f 1
one

echo -e "one\ttwo\tthree\tfour" | cut -f 2
two

echo -e "one\ttwo\tthree\tfour" | cut -f 3
three
...etc...

Changing the input and output delimiters.
-----------------------------------------

Specifying a delimiter:
-----------------------
 --- use the -d option.

 echo 'one,two,three' | cut -d "," -f 3
three

echo 'one,two,three' | cut -d "," -f 2
two

 echo 'one,two,three' | cut -d "," -f 1

Sometimes people will not put the single quotes around the delimiter character.
   "        "      "    "  "   a space between the -d option and the character as in

echo 'one,two,three' | cut -d, -f 3
three
 >>> this will work as long as it is a character that is not used or interpreted by the shell.

echo 'one\two\three' | cut -d \ -f 3
cut: the delimiter must be a single character
Try 'cut --help' for more information.
----- shell interprets this as a line continuation character.
>>> always quote your delimiter to avoid this problem.


Get field 1 and 3
-----------------

cut -d ':' -f 1,3 /etc/passwd
root:0
bin:1
daemon:2

NOTICE the delimiter remains the same.
If you want to change the delimiter then you must use the --output-delimiter option.
CUT only handles single character delimiters...

cut -d ':' -f 1,3 --output-delimiter=',' /etc/passwd
root,0
bin,1
daemon,2

Removing file headers   .csv file
-----------------------------------
      Processing CSV and other columnar data.
      Using patterns with the grep command.
      Inverting matches with the grep command.

grep displays matches to a pattern.

greg first people.csv  will match any instances of first
BETTER
grep first,last

REGEX: Most powerful 2-
========================
^ carrot symbol  matches the beginning of a line...
e.g.
 grep '^first' people.csv

$ - matches the end of a line...
* find all the lines that end in a "t"
e.g.  grep 't$' people.csv

Matching multiple patterns at once with the grep command.
Using Regular Expression Anchors to create exact matches.
==========================================================
Now combine the two to find the header of the .csv

grep '^first,last$'  people.csv
This will yield:
first,last (the header of the ficticous .csv file)

Now reverse the grep search to exclude it from the results.
****************
Inverts option...   -v
==================
grep  -v '^first,last$'  people.csv
--- This will match any options that do NOT match the pattern supplied.
Therefore this will list all the contents of the .csv file.

NOW we can send it to cut.....

grep  -v '^first,last$'  people.csv  | cut -d ',' -f 1

 - you can use  cut first but cut changes the output so it can be more difficult.
---------------------
cut -d ',' -f 1 people.csv | grep -v '^first$'

Multicharacter delimiter in cut... fail

cut -d 'DATA:' -f 2 people.dat
 --- gives an error message.


AWK
---
How to write one-line awk programs.
Using multiple character delimiters with awk.

awk -F 'DATA:' '{print $2}' people.dat
 -F is the field seperater    {} tells awk to take action..

To have the fields run together in awk leave out the , which is the filed separater.
---------------

awk -F 'DATA:' '{print $2 $3 }' people.dat
---------- instead of the standard way: awk -F 'DATA:' '{print $2, $3 }' people.dat


Displaying the last field of every line in a file,
even if those number of fields is different on each line.

OFS = Output field separater
----------------------------

Reordering columns.
------------------

awk -F ':'  '{print $1, $3}' /etc/passwd

root 0
bin 1
daemon 2

awk -F ':'  '{print $3, $1}' /etc/passwd

0 root
1 bin
2 daemon

$NF = number of fields so use $NF to print the last column


Performing mathematical operations with awk.
--------------------------------------------
--- This prints the second to the last field... NF - 1
awk _f ':'  '{print $(NF - 1)}'  /etc/passwd

Processing irregular or non-uniform data.
 -  See awk folder in this repo.
============by default:  AWK considers non-white space characters to be a field

.
