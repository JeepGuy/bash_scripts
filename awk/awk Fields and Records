AWK Fields and Records
======================
By default AWK considers each line of data as a record
  > and strings that are separated by white spaces are considered fields.
  > White spaces can be any number of records or tags (?)
  Tabs = ?

  awk allows us identify and exact fields within a line.

  $1 = First field of the input data line.
  $2 = Second field of the input data line.
  3$ = Third field of the input data line.
  ... etc.

  The $1, $2, $3 $NF are actually variables that are automatically assigned
  variables in the input line by awk.

  NF is a special operator that stores the total number of fields in an input line.
    Therefore
  $NF = Last field of the input line

  $0 = The entire input line.

  THEREFORE:

  awk '[print]' data.txt    =   awk '{print $0}' data.txt
   > both print each input line fully.

  awk '{print $1}' data.txt   = will print the first field of the input line.

  awk '{print $1,$3,$4}' data.txt   = will print the 1st, 3rd, and 4th  fields of the input line.
   > the fields are separated by spaces in the output
   > If you omit the commas the fields will be glued together.

   awk '{print $2,$NF}' data.txt  = will print the 2nd and last field of the input.

    INSERTING Text into the output:
    -------------------------------
  awk '{print $2, "works on", $3}' data.txt
    > will print the second field following by a space and the words " works on " field three.

    USING AWK on the right side of a pipe
    --------------------------------------
    who
  jcbrent  :0           2018-03-08 17:42 (:0)
  jcbrent  pts/0        2018-03-08 17:43 (:0)
  jcbrent  pts/1        2018-03-08 18:16 (:0)

  To print only one field of the output of the command...

  who | awk '{print $1}'
  > will only print "jcbrent"

              who | awk '{print $1, $3}'

  Now on the output of the sort command.

 sort emdata | awk '{print $1}'
    > This will sort the list first and then print the first field.


Ls -l example:

-rwxrwxr-x. 1 jcbrent jcbrent   11451 Mar  8 21:48 get_ssp_data.sh
-rw-rw-r--. 1 jcbrent jcbrent   30151 Mar  8 21:49 kuberAllValuesHelper.yaml
-rw-rw-r--. 1 jcbrent jcbrent    5062 Mar  8 21:49 kuberValuesImageListingHelper.txt

To PRINT ONLY THE FILE NAME AND PERMISSIONS of the above ls -l output
=============================================

NR - represents the current line number = record number
---

ls -l | awk '{print $NF, "\t", $1}'
    > The ""/t" is the tab character.
 - Will show only the last field followed by the first field.

    5348 	 total  >>> This first total line is always printed
    get_ssp_data.sh 	 -rwxrwxr-x.
    kuberAllValuesHelper.yaml 	 -rw-rw-r--.
    kuberValuesImageListingHelper.txt 	 -rw-rw-r--.


5348 	 total  >>> This first total line is always printed
  > to eliminate this first line apply a selection criteria

    NR=!1  NR is a built in operator/variable that represents the current line number
           =! is the not equal operator
           1 is the operator.
    This means it will only apply the filter if the current line is NOT EQUAL to 1.
    THEREFORE it excludes line 1.

ls -l | awk '{print $NF, "\t", $1}'


More examples:

$ ls -l | awk '{print $NF, "\t", $3}'
5348
archive_csv_files 	 jcbrent
functions 	 jcbrent
get_ssp_data.sh 	 jcbrent
kuberAllValuesHelper.yaml 	 jcbrent
kuberValuesImageListingHelper.txt 	 jcbrent
nanostorm_ssp_data.csv 	 jcbrent
nanostorm_ssp_data_format1_back_up.csv 	 jcbrent
z_notes 	 jcbrent
z_old_kuberAllValuesHelper.yaml 	 jcbrent
z_old_kuberValuesImageListingHelper.txt 	 jcbrent

$ ls -l | awk 'NR!=1{print $NF, "\t", $3}'

archive_csv_files 	 jcbrent
functions 	 jcbrent
get_ssp_data.sh 	 jcbrent
kuberAllValuesHelper.yaml 	 jcbrent
kuberValuesImageListingHelper.txt 	 jcbrent


ls -l | awk 'NR!=1{print $NF, "\t", $3}' | sort
 >stdout

archive_csv_files 	 jcbrent
functions 	 jcbrent
get_ssp_data.sh 	 jcbrent
kuberAllValuesHelper.yaml 	 jcbrent
kuberValuesImageListingHelper.txt 	 jcbrent
